# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false
   
[[outputs.influxdb_v2]]
  urls = ["http://localhost:8086"]
  ## Token for authentication.
  token ="pjpBomkx_Jjq_BB8FwtFDEx2JQhuLzW9D4fN5aRdQmY_k_w8fGiJm2u3RKQMEKTtrvxVR-SDeB5v1gh77M8V7Q=="
  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "onedev_influx"
  ## Destination bucket to write into.
  bucket = "telegraf"
  
[[inputs.modbus]]
  ## Device name
  name = "Device"
  slave_id = 1
  ## Timeout for each request
  timeout = "10s"

  ## Maximum number of retries and the time to wait between retries
  ## when a slave-device is busy.
   busy_retries = 0
   busy_retries_wait = "100ms"
  # TCP - connect via Modbus/TCP
  controller = "tcp://192.168.145.4:502"

  ## Digital Variables, Discrete Inputs and Coils
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## address     - variable address

  ## Analog Variables, Input Registers and Holding Registers
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## byte_order  - the ordering of bytes
  ##  |---AB, ABCD   - Big Endian
  ##  |---BA, DCBA   - Little Endian
  ##  |---BADC       - Mid-Big Endian
  ##  |---CDAB       - Mid-Little Endian
  ## data_type  - INT16, UINT16, INT32, UINT32, INT64, UINT64, FLOAT32-IEEE, FLOAT64-IEEE (the IEEE 754 binary representation)
  ##              FLOAT32 (deprecated), FIXED, UFIXED (fixed-point representation on input)
  ## scale      - the final numeric variable representation
  ## address    - variable address

  holding_registers = [
    { name = "VOLTAGE_avg", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3025,3026]},
    { name = "CURRENT_A", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [2999,3000]},
    { name = "CURRENT_B", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3001,3002]},
	{ name = "CURRENT_C", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3003,3004]},
	{ name = "CURRENT_N", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3005,3006]},
	{ name = "CURRENT_G", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3007,3008]},
	{ name = "CURRENT_avg", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3009,3010]},
	{ name = "VOLTAGE_LN", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3035,3036]},
	{ name = "PF", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3083,3084]},
	{ name = "Frequency", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3109,3110]},
	{ name = "Temperature", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3131,3132]},
	{ name = "ReactivePowerTotal", byte_order = "ABCD",   data_type = "FLOAT32-IEEE", scale=1.000,  address = [3067,3068]},	
  ]
  
[[inputs.opcua]]
  ## Metric name
  # name = "opcua"
  #
  ## OPC UA Endpoint URL
   endpoint = "opc.tcp://cMT-413A:4840/G01"
  #
  ## Maximum time allowed to establish a connect to the endpoint.
   connect_timeout = "10s"
  #
  ## Maximum time allowed for a request over the estabilished connection.
  # request_timeout = "5s"
  #
  ## Security policy, one of "None", "Basic128Rsa15", "Basic256",
  ## "Basic256Sha256", or "auto"
   security_policy = "None"
  #
  ## Security mode, one of "None", "Sign", "SignAndEncrypt", or "auto"
  # security_mode = "auto"
  #
  ## Path to cert.pem. Required when security mode or policy isn't "None".
  ## If cert path is not supplied, self-signed cert and key will be generated.
  # certificate = "/etc/telegraf/cert.pem"
  #
  ## Path to private key.pem. Required when security mode or policy isn't "None".
  ## If key path is not supplied, self-signed cert and key will be generated.
  # private_key = "/etc/telegraf/key.pem"
  #
  ## Authentication Method, one of "Certificate", "UserName", or "Anonymous".  To
  ## authenticate using a specific ID, select 'Certificate' or 'UserName'
  # auth_method = "Anonymous"
  #
  ## Username. Required for auth_method = "UserName"
  # username = ""
  #
  ## Password. Required for auth_method = "UserName"
  # password = ""
  #
  ## Node ID configuration
  ## name              - field name to use in the output
  ## namespace         - OPC UA namespace of the node (integer value 0 thru 3)
  ## identifier_type   - OPC UA ID type (s=string, i=numeric, g=guid, b=opaque)
  ## identifier        - OPC UA ID (tag as shown in opcua browser)
  ## tags              - extra tags to be added to the output metric (optional)
  ## Example:
  ## {name="ProductUri", namespace="0", identifier_type="i", identifier="2262", tags=[["tag1","value1"],["tag2","value2]]}
   nodes = [
    {name="PRODUCT_CNT", namespace="2", identifier_type="s", identifier="MODBUS RTU.Tags.present counter"},
    {name="STATE_MACHINE", namespace="2", identifier_type="s", identifier="Siemens S7-300 MPI(cp18).Tags.Running(cp18)"},
	{name="SPEED/MINUTE", namespace="2", identifier_type="s", identifier="Local HMI.Tags.G01_cp18.MBperMenit(cp18)"},
  ]